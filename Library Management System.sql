-- Database Creation----------------
CREATE DATABASE LIBRARY;
USE LIBRARY;

-- Admin Table----------------------
CREATE TABLE ADMIN(
	USER_ID VARCHAR(50) PRIMARY KEY,
    NAME VARCHAR(50),
    PASSWORD VARCHAR(50),
    CONTACT VARCHAR(15)
    );
    
INSERT INTO ADMIN VALUES
	('redoy','Redoy','1491','01972201095');

SELECT * FROM ADMIN;

-- Books Table------------------------
CREATE TABLE books (
    BOOK_ID VARCHAR(10) PRIMARY KEY,
    category VARCHAR(50),
    NAME VARCHAR(100),
    AUTHOR VARCHAR(100),
    COPIES INT
);

INSERT INTO books VALUES ('B001', 'DATA STRUCTURE & ALGORITHMS', 'ALGORITHMS MADE EASY', 'NARSHIMA KARUMANCHI', 10),
('B002', 'JAVA', 'HEAD FIRST JAVA', 'KATHY SIERRA BERT BATES', 18),
('B003', 'INDIAN HISTORY', 'INDIAS ANCIENT PAST', 'R.S SHARMA', 12),
('B004', 'INDIAN POLITICS', 'THE GAME OF VOTES', 'FARHAT BASIR KHAN', 8),
('B005', 'NOVEL', 'THE GREAT GATSBY', 'F. SCOTT FITZGERALD', 6),
('B006', 'MYSQL', 'MURACHS MYSQL', 'JOEL MURACH', 5),
('B007', 'GEOGRAPHY', 'PRISONERS OF GEOGRAPHY', 'TIM MARSHALL', 7),
('B008', 'COMIC', 'THE SECRET LIFE OF DEBBIE G.', 'VIDHA BATRA', 9),
('B009', 'SCIENCE', 'COSMOS', 'CARL SAGAN', 20),
('B010', 'BIOLOGY', 'CONCEPTS OF BIOLOGY', 'REBECCA ROUSH', 14);

SELECT * FROM books;


-- Staff Table-------------------------------
CREATE TABLE STAFF(
	STAFF_ID VARCHAR(50) PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    CONTACT VARCHAR(15)
    );

   
INSERT INTO STAFF VALUES 
('S001', 'Tarak Rahman', '01710000001'),
('S002', 'Taskin Ahmed', '01710000002'),
 ('S003', 'Adib Chowdhury', '01710000003'),
('S004', 'Tanvir Hossain', '01710000004'),
('S005', 'Joy Jahan', '01710000005');

SELECT * FROM STAFF;

-- User Table --------------------------------------
CREATE TABLE Users (
    USER_ID VARCHAR(10) PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    PASSWORD VARCHAR(100) NOT NULL,
    CONTACT VARCHAR(20)
);
INSERT INTO Users VALUES ('101', 'Ashraful Islam', 'ashraful178@gmail.com', '178', '01712345678'),
		('102', 'Tarak Rahman', 'tarak@gmail.com', '137', '01898765432');
SELECT * FROM USERS;


-- BorrowedBooks Table------------------------------
CREATE TABLE BorrowedBooks (
    BORROW_ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID VARCHAR(10) NOT NULL,
    BOOK_ID VARCHAR(10) NOT NULL,
    BORROW_DATE DATE NOT NULL,
    RETURN_DATE DATE NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES Users(USER_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES Books(BOOK_ID)
);
ALTER TABLE BorrowedBooks
ADD RETURN_BOOK VARCHAR(10) NOT NULL;

SELECT * FROM BorrowedBooks;


-- Reviews Table----------------------------------
CREATE TABLE Reviews (
    REVIEW_ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID VARCHAR(10) NOT NULL,
    BOOK_ID VARCHAR(10) NOT NULL,
    RATING INT CHECK (RATING BETWEEN 1 AND 5),
    COMMENT TEXT,
    FOREIGN KEY (USER_ID) REFERENCES Users(USER_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES Books(BOOK_ID)
);
SELECT * FROM Reviews;

-- JOIN---------------------------------

SELECT B.USER_ID, U.NAME,B.BOOK_ID,BOOKS.NAME,B.BORROW_DATE,B.RETURN_DATE FROM USERS U INNER JOIN BorrowedBooks B INNER JOIN BOOKS ON U.USER_ID=B.USER_ID AND B.BOOK_ID = BOOKS.BOOK_ID AND B.RETURN_BOOK="NO";

-- View--------------------------------------
CREATE OR REPLACE VIEW NO_RETURN AS SELECT 
	B.USER_ID, 
    U.NAME AS USER_NAME,
    B.BOOK_ID,
    BOOKS.NAME AS BOOK_NAME,
    B.BORROW_DATE,
    B.RETURN_DATE 
FROM 
    USERS U 
    INNER JOIN BorrowedBooks B ON U.USER_ID = B.USER_ID 
    INNER JOIN BOOKS ON B.BOOK_ID = BOOKS.BOOK_ID 
WHERE 
    B.RETURN_BOOK = 'NO';
SELECT * FROM NO_RETURN;


-- Trigger -----------------------------
CREATE TABLE DeletedBooksBackup (
    BOOK_ID VARCHAR(10),
    CATEGORY VARCHAR(50),
    NAME VARCHAR(100),
    AUTHOR VARCHAR(100),
    COPIES INT,
    DELETED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

DELIMITER $$
CREATE TRIGGER BackupBeforeDelete
BEFORE DELETE ON Books
FOR EACH ROW
BEGIN
    INSERT INTO DeletedBooksBackup (BOOK_ID, CATEGORY, NAME, AUTHOR, COPIES)
    VALUES (OLD.BOOK_ID, OLD.CATEGORY, OLD.NAME, OLD.AUTHOR, OLD.COPIES);
END$$

DELIMITER ;
SELECT * FROM DeletedBooksBackup;


-- Store Procedure-------------------
DELIMITER $$
CREATE PROCEDURE GetBorrowedBookDetails (IN p_book_id VARCHAR(10),IN p_user_id VARCHAR(10))
BEGIN
    SELECT * FROM BorrowedBooks WHERE BOOK_ID = p_book_id AND USER_ID = p_user_id;
END $$
DELIMITER ;

-- CALL GetBorrowedBookDetails('B007','1122');

-- Book copies Update(Trigger)-----------------------------------------------------
DELIMITER $$
CREATE TRIGGER DecreaseCopiesAfterBorrow
AFTER INSERT ON BorrowedBooks
FOR EACH ROW
BEGIN
    UPDATE books
    SET COPIES = COPIES - 1
    WHERE BOOK_ID = NEW.BOOK_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER IncreaseCopiesAfterReturn
AFTER UPDATE ON BorrowedBooks
FOR EACH ROW
BEGIN
    IF OLD.RETURN_BOOK = 'NO' AND NEW.RETURN_BOOK = 'YES' THEN
        UPDATE books
        SET COPIES = COPIES + 1
        WHERE BOOK_ID = NEW.BOOK_ID;
    END IF;
END$$
DELIMITER ;










	
